@using System.Text.RegularExpressions
@using System.Reflection

@typeparam T

<label @attributes="InputAttributes">@_label</label>

@code {
    [Parameter]
    public T Value { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<T>> ValueExpression { get; set; }

    [Parameter]
    public Expression<Func<T>> For { get; set; }

    [Parameter]
    public Dictionary<string, object> InputAttributes { get; set; }

    private static Regex _titleCaseToSentenceCaseRegex = new Regex(@"(?<=[A-Z])(?=[A-Z][a-z])|(?<=[^A-Z])(?=[A-Z])|(?<=[A-Za-z])(?=[^A-Za-z])");

    private string _label = String.Empty;

    protected override void OnParametersSet()
    {
        _label = GetDisplayName();
    }

    private string GetDisplayName()
    {
        MemberExpression forMember;

        var expression = For ?? ValueExpression;

        if (expression.Body is MemberExpression memberExpression) forMember = memberExpression;
        else if (expression.Body is UnaryExpression unaryExpression && unaryExpression.Operand is MemberExpression unaryMemberExpression)
            forMember = unaryMemberExpression;
        else throw new InvalidOperationException("Must be an expression terminating in a member");

        var displayNameAttribute = forMember.Member.GetCustomAttribute(typeof(DisplayNameAttribute)) as DisplayNameAttribute;

        if (displayNameAttribute != null) return displayNameAttribute.DisplayName;

        var displayAttribute = forMember.Member.GetCustomAttribute(typeof(DisplayAttribute)) as DisplayAttribute;

        if (displayAttribute?.Name != null) return displayAttribute.Name;

        return _titleCaseToSentenceCaseRegex.Replace(forMember.Member.Name, " ");
    }
}